function matchGroup(pattern, input) {
  const groupEnd = pattern.indexOf(")");
  let groupPattern = pattern.slice(1, groupEnd);

  if (groupPattern.includes("|")) {
    return matchAlternation(groupPattern, input) && match(pattern.slice(groupEnd + 1), input.slice(groupPattern.length));
  }

  if (pattern[groupEnd + 1] === "?") {
    const remainderPattern = pattern.slice(groupEnd + 2); // +2 needed to slice off the ')?'
    return (
      (match(groupPattern, input.slice(0, groupPattern.length)) &&
        match(remainderPattern, input.slice(groupPattern.length))) ||
      match(remainderPattern, input)
    );
  } else if (pattern[groupEnd + 1] === "*") {
    const remainderPattern = pattern.slice(groupEnd + 2); // +2 needed to slice off the ')*'
    return (
      (match(groupPattern, input.slice(0, groupPattern.length)) &&
        match(pattern, input.slice(groupPattern.length))) ||
      match(remainderPattern, input)
    );
  } else if (pattern[groupEnd + 1] === "+") {
    const remainderPattern = pattern.slice(groupEnd + 2); // +2 needed to slice off the ')+'
    return match(groupPattern, input.slice(0, groupPattern.length)) && matchPlus(groupPattern, input.slice(groupPattern.length));
  } else {
    const remainderPattern = pattern.slice(groupEnd + 1); // +1 needed to slice off the ')'
    return (
      match(groupPattern, input.slice(0, groupPattern.length)) &&
      match(remainderPattern, input.slice(groupPattern.length))
    );
  }
}

function matchAlternation(pattern, input) {
  const options = pattern.split("|");
  for (const option of options) {
    if (match(option, input.slice(0, option.length))) {
      return true;
    }
  }
  return false;
}
